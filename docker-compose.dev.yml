services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: waugzee-server-${DOCKER_ENV:-dev}
    ports:
      - "${SERVER_PORT:-8289}:8288"
    volumes:
      - ./server:/app
      # - /app/main
      - ./.env:/app/.env
      # - ./.env.local:/app/.env.local:ro  # Mount .env.local if it exists (read-only)
      - server_cache:/go/pkg/mod
      - server_gocache:/.cache/go-build
      - server_db:/app/tmp
      - discogs_data:/app/discogs-data
    environment:
      - GO_ENV=development
      - CGO_ENABLED=1
      - GOCACHE=/.cache/go-build
      - GOMODCACHE=/go/pkg/mod
      - SERVER_PORT=8288 # Internal port should always be 8288
    working_dir: /app
    networks:
      - dev-network-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_started

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: waugzee-client-${DOCKER_ENV:-dev}
    ports:
      - "${CLIENT_PORT:-3021}:3021"
    volumes:
      - ./client:/app
      - client_node_modules:/app/node_modules
      - client_dist:/app/dist
    environment:
      - NODE_ENV=development
      - VITE_GENERAL_VERSION=${VITE_GENERAL_VERSION:-0.0.1}
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8288}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8288/ws}
      - VITE_ENV=${VITE_ENV:-local}
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3021 # Internal port should always be 3020
    working_dir: /app
    networks:
      - dev-network-dev
    restart: unless-stopped
    depends_on:
      - server

  postgres:
    image: postgres:18
    hostname: waugzee-postgres
    container_name: waugzee-postgres-${DOCKER_ENV:-dev}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-waugzee_dev}
      POSTGRES_USER: ${DB_USER:-waugzee_dev_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8"
      TZ: "UTC"
    command: >
      postgres
      -c shared_buffers=256MB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c effective_cache_size=1GB
      -c wal_buffers=8MB
      -c checkpoint_completion_target=0.9
      -c max_connections=100
      -c max_worker_processes=4
      -c max_parallel_workers=2
      -c max_parallel_workers_per_gather=2
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: user=%u,db=%d '
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - dev-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-waugzee_dev_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 256MB

  valkey:
    image: valkey/valkey:8.0-alpine
    container_name: waugzee-valkey-${DOCKER_ENV:-dev}
    command: valkey-server /usr/local/etc/valkey/valkey.conf
    ports:
      - "${DB_CACHE_PORT:-6380}:6380"
    volumes:
      - ./database/valkey/valkey.conf:/usr/local/etc/valkey/valkey.conf
      - valkey_data:/data
      - valkey_logs:/var/log/valkey
    environment:
      - VALKEY_ENV=development
    networks:
      - dev-network-dev
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

volumes:
  server_tmp:
  server_cache:
  server_gocache:
  server_db:
  discogs_data:
  client_node_modules:
  client_dist:
  postgres_data:
  valkey_data:
  valkey_logs:

networks:
  dev-network-dev:
    driver: bridge
